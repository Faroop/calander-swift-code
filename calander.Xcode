import UIKit
import EventKit

/ Create an Event Store instance
let eventStore = EKEventStore();
 
// Use Event Store to create a new calendar instance
// Configure its title
let newCalendar = EKCalendar(forEntityType: .Event, eventStore: eventStore)
 
// Probably want to prevent someone from saving a calendar
// if they don't type in a name...
newCalendar.title = "Some Calendar Name"
 
// Access list of available sources from the Event Store
let sourcesInEventStore = eventStore.sources 
 
// Filter the available sources and select the "Local" source to assign to the new calendar's
// source property
newCalendar.source = sourcesInEventStore.filter{
    (source: EKSource) -> Bool in
    source.sourceType.rawValue == EKSourceType.Local.rawValue
}.first!
 
// Save the calendar using the Event Store instance
do {
    try eventStore.saveCalendar(newCalendar, commit: true)
    NSUserDefaults.standardUserDefaults().setObject(newCalendar.calendarIdentifier, forKey: "EventTrackerPrimaryCalendar")
} catch {
    let alert = UIAlertController(title: "Calendar could not save", message: (error as NSError).localizedDescription, preferredStyle: .Alert)
    let OKAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
    alert.addAction(OKAction)
    
    self.presentViewController(alert, animated: true, completion: nil)
}

newCalendar.source = sourcesInEventStore.filter{
    (source: EKSource) -> Bool in
    source.sourceType.rawValue == EKSourceType.Local.rawValue
}.first!

// ...
 
// Save the calendar using the Event Store instance
do {
    try eventStore.saveCalendar(newCalendar, commit: true)
    NSUserDefaults.standardUserDefaults().setObject(newCalendar.calendarIdentifier, forKey: "EventTrackerPrimaryCalendar")
} catch {
    let alert = UIAlertController(title: "Calendar could not save", message: (error as NSError).localizedDescription, preferredStyle: .Alert)
    let OKAction = UIAlertAction(title: "OK", style: .Default, handler: nil)
    alert.addAction(OKAction)
    
    self.presentViewController(alert, animated: true, completion: nil)
}
